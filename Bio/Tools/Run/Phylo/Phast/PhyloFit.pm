# $Id$
#
# BioPerl module for Bio::Tools::Run::Phylo::Phast::PhyloFit
#
# Cared for by Sendu Bala <bix@sendu.me.uk>
#
# Copyright Sendu Bala
#
# You may distribute this module under the same terms as perl itself

# POD documentation - main docs before the code

=head1 NAME

Bio::Tools::Run::Phylo::Phast::PhyloFit - Wrapper for phyloFit

=head1 SYNOPSIS

  use Bio::Tools::Run::Phylo::Phast::PhyloFit;

  # Make a PhyloFit factory
  $factory = Bio::Tools::Run::Phylo::Phast::PhastCons->new();

  # Generate an init.mod file for use by phastCons
  my $init_file = $factory->run($alignment, $tree);

=head1 DESCRIPTION

This is a wrapper for running the phyloFit application by Adam Siepel. You
can get details here: http://compgen.bscb.cornell.edu/~acs/software.html

Currently the interface is extremely simplified. Only the input alignment and
tree can be specified as arguments to run() so far. No other options are
explicitly supported, though you can try creating your own argument string
and supplying it to the arguments() method.

You will need to enable this PhyloFit wrapper to find the phast programs (at
least phyloFit itself).
This can be done in (at least) three ways:

 1. Make sure the phyloFit executable is in your path.
 2. Define an environmental variable PHASTDIR which is a 
    directory which contains the phyloFit application:
    In bash:

    export PHASTDIR=/home/username/phast/bin

    In csh/tcsh:

    setenv PHASTDIR /home/username/phast/bin

 3. Include a definition of an environmental variable PHASTDIR in
    every script that will use this PhyloFit wrapper module, e.g.:

    BEGIN { $ENV{PHASTDIR} = '/home/username/phast/bin' }
    use Bio::Tools::Run::Phylo::Phast::PhyloFit;

=head1 FEEDBACK

=head2 Mailing Lists

User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.

  bioperl-l@bioperl.org                  - General discussion
  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists

=head2 Reporting Bugs

Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:

  http://bugzilla.open-bio.org/

=head1 AUTHOR - Sendu Bala

Email bix@sendu.me.uk

=head1 APPENDIX

The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _

=cut

package Bio::Tools::Run::Phylo::Phast::PhyloFit;
use strict;

use Cwd;
use File::Spec;
use Bio::AlignIO;
use Bio::TreeIO;

use base qw(Bio::Tools::Run::WrapperBase);

our $PROGRAM_NAME = 'phyloFit';
our $PROGRAM_DIR = $ENV{'PHASTDIR'};

=head2 program_name

 Title   : program_name
 Usage   : $factory>program_name()
 Function: holds the program name
 Returns : string
 Args    : None

=cut

sub program_name {
    return $PROGRAM_NAME;
}

=head2 program_dir

 Title   : program_dir
 Usage   : $factory->program_dir(@params)
 Function: returns the program directory, obtiained from ENV variable.
 Returns : string
 Args    : None

=cut

sub program_dir {
    return $PROGRAM_DIR;
}

=head2 new

 Title   : new
 Usage   : $factory = Bio::Tools::Run::Phylo::Phast::PhyloFit->new()
 Function: creates a new PhyloFit factory
 Returns : Bio::Tools::Run::Phylo::Phast::PhyloFit
 Args    : none

=cut

sub new {
    my ($class, @args) = @_;
    my $self = $class->SUPER::new(@args);
    
    # for consistency with other run modules, allow params to be dashless
    my %args = @args;
    while (my ($key, $val) = each %args) {
        if ($key !~ /^-/) {
            delete $args{$key};
            $args{'-'.$key} = $val;
        }
    }
    
    return $self;
}

=head2 run

 Title   : run
 Usage   : $result = $factory->run($fasta_align_file, $newick_tree_file);
           -or-
           $result = $factory->run($align_object, $tree_object);
           -or-
           $result = $factory->run($align_object, $db_taxonomy_object);
 Function: Runs phyloFit on an alignment.
 Returns : filename of init.mod file produced
 Args    : The first argument represents an alignment, the second argument
           a species tree.
           The alignment can be provided as a multi-fasta format alignment
           filename, or a Bio::Align::AlignI complient object (eg. a
           Bio::SimpleAlign).
           The species tree can be provided as a newick format tree filename
           or a Bio::Tree::TreeI complient object. Alternatively a
           Bio::DB::Taxonomy object can be supplied, in which case the species
           tree will be generated by using the alignment sequence names as
           species names and looking for those in the supplied database.
           
           In all cases, the alignment sequence names must correspond to node
           ids in the species tree. Multi-word species names should be joined
           with underscores to form the sequence names, eg. Homo_sapiens

=cut

sub run {
    my ($self, $aln, $tree) = @_;
    
    if (ref $aln && $aln->isa("Bio::Align::AlignI")) {
        $self->_writeAlignFile($aln);
    }
    else {
        $self->throw("When not supplying a Bio::Align::AlignI object, you must supply a readable filename") unless -e $aln;
        $self->_alignment_file($aln);
    }
    
    if (-e $tree || (ref $tree && ($tree->isa("Bio::Tree::TreeI") || $tree->isa('Bio::DB::Taxonomy')))) {
        $self->_writeTreeFile($tree);
    }
    else {
        $self->throw("When not supplying a Bio::Tree::TreeI or Bio::DB::Taxonomy object, you must supply a readable filename");
    }
    
    $self->_check_names;
    
    return $self->_run; 
}

sub _run {
    my $self = shift;
    
    my $exe = $self->executable || return;
    
    # cd to a temp dir
    my $temp_dir = $self->tempdir;
    my $cwd = Cwd->cwd();
    chdir($temp_dir) || $self->throw("Couldn't change to temp dir '$temp_dir'");
    
    #...phyloFit --tree "(human,(mouse,rat))" --msa-format FASTA --out-root init alignment.fa
    my $command = $exe.$self->_setparams;
    $self->debug("phyloFit training command = $command");
    system($command) && $self->throw("phyloFit call ($command) crashed: $?");
    
    # cd back again
    chdir($cwd) || $self->throw("Couldn't change back to working directory '$cwd'");
    
    return File::Spec->catfile($temp_dir, 'init.mod');
}

=head2 _setparams

 Title   : _setparams
 Usage   : Internal function, not to be called directly
 Function: Creates a string of params to be used in the command string
 Returns : string of params
 Args    : none

=cut

sub _setparams {
    my $self = shift;
    
    my $param_string = ' --tree '.$self->_tree_file;
    $param_string .= ' --msa-format FASTA';
    $param_string .= ' --out-root init';
    $param_string .= ' '.$self->arguments if $self->arguments;
    $param_string .= ' '.$self->_alignment_file;
    
    return $param_string;
}

=head2 _writeAlignFile

 Title   : _writeAlignFile
 Usage   : obj->_writeAlignFile($aln)
 Function: Internal(not to be used directly)
 Returns : n/a (sets _alignment_file())
 Args    : Bio::Align::AlignI

=cut

sub _writeAlignFile {
    my ($self, $align) = @_;
    
    my ($tfh, $tempfile) = $self->io->tempfile(-dir=>$self->tempdir);
    
    my $out = Bio::AlignIO->new('-fh' => $tfh, '-format' => 'fasta');
    $out->write_aln($align);
    
    $out->close();
    $out = undef;
    close($tfh);
    undef $tfh;
    $self->_alignment_file($tempfile);
}

=head2 _writeTreeFile

 Title   : _writeTreeFile
 Usage   : obj->_writeTreeFile($tree)
 Function: Internal(not to be used directly)
 Returns : n/a (sets _tree_file())
 Args    : Bio::Tree::TreeI OR Bio::DB::Taxonomy ($self->_alignment_file must be
           set in the latter case)

=cut

sub _writeTreeFile {
    my ($self, $thing) = @_;
    
    my $tree;
    if (-e $thing) {
        # read the tree in so we can later spit it out in a format acceptable
        # to phyloFit
        my $in = Bio::TreeIO->new(-file => $thing, -format => 'newick');
        $tree = $in->next_tree;
    }
    elsif ($thing->isa('Bio::Tree::TreeI')) {
        $tree = $thing;
    }
    else {
        # get all the alignment sequence names
        my @species_names = $self->_get_seq_names;
        
        # the full lineages of the species are merged into a single tree
        foreach my $name (@species_names) {
            my $ncbi_id = $thing->get_taxonid($name);
            if ($ncbi_id) {
                my $node = $thing->get_taxon(-taxonid => $ncbi_id);
                $node->name('seq_id', $name);
                
                if ($tree) {
                    $tree->merge_lineage($node);
                }
                else {
                    $tree = new Bio::Tree::Tree(-node => $node);
                }
            }
            else {
                $self->throw("No taxonomy database node for species ".$name);
            }
        }
        
        # convert node ids to their seq_ids for correct output with TreeIO
        foreach my $node ($tree->get_nodes) {
            my $seq_id = $node->name('seq_id');
            $seq_id = $seq_id ? shift @{$seq_id} : ($node->node_name ? $node->node_name : $node->id);
            
            $node->id($seq_id);
        }
    }
    
    # force the tree to be binary
    $tree->force_binary;
    
    # get rid of spaces in ids to prevent quoted strings which phyloFit doesn't
    # like
    foreach my $node ($tree->get_nodes) {
        my $id = $node->id;
        $id =~ s/ /_/g;
        $node->id($id);
    }
    
    my ($tfh, $tempfile) = $self->io->tempfile(-dir => $self->tempdir);
    
    my $out = Bio::TreeIO->new(-fh => $tfh, -format => 'newick');
    $out->write_tree($tree);
    
    $out->close();
    $out = undef;
    close($tfh);
    undef $tfh;
    $self->_tree_file($tempfile);
}

# store the input alignment file name
sub _alignment_file {
    my $self = shift;
    if (@_) { $self->{_align_file} = Cwd::abs_path(shift) }
    return $self->{_align_file} || '';
}

# store the input tree file name
sub _tree_file {
    my $self = shift;
    if (@_) { $self->{_tree_file} = Cwd::abs_path(shift) }
    return $self->{_tree_file} || '';
}

# get sequence names from the supplied alignment file
sub _get_seq_names {
    my $self = shift;
    my $file = $self->_alignment_file || $self->throw("Alignment filename hasn't been set");
    
    my $align_in = Bio::AlignIO->new(-file => $file, -format => 'fasta');
    my $aln = $align_in->next_aln || $self->throw("Alignment file '$file' had no alignment!");
    
    my @names;
    foreach my $seq ($aln->each_seq) {
        push(@names, $seq->id);
    }
    
    return @names;
}

# get node names form the supplied tree file
sub _get_node_names {
    my $self = shift;
    my $file = $self->_tree_file || $self->throw("Tree filename hasn't been set");
    
    my $tree_in = Bio::TreeIO->new(-file => $file, -format => 'newick');
    my $tree = $tree_in->next_tree || $self-throw("Tree file '$file' had no tree!");
    
    my @names;
    foreach my $node ($tree->get_leaf_nodes) {
        push(@names, $node->id);
    }
    
    return @names;
}

# check the tree and alignment ids match
sub _check_names {
    my $self = shift;
    
    my @seq_names = $self->_get_seq_names;
    my %node_names = map { $_ => 1 } $self->_get_node_names;
    
    # (not interested in tree nodes that don't map to sequence, since we
    #  expect the tree to have internal nodes not represented by sequence)
    foreach my $name (@seq_names) {
        $self->{_unmapped}{$name} = 1 unless defined $node_names{$name};
    }
    
    if (defined($self->{_unmapped})) {
        my $count = scalar(keys %{$self->{_unmapped}});
        my $unmapped = join(", ", keys %{$self->{_unmapped}});
        $self->throw("$count unmapped ids between the supplied alignment and tree: $unmapped");
    }
}

1;
